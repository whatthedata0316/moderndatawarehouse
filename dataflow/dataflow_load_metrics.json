{
	"name": "dataflow_load_metrics",
	"properties": {
		"folder": {
			"name": "wth-team2"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_AzureSynapse",
						"type": "DatasetReference"
					},
					"name": "StageCovid19Metrics"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AzureSynapse",
						"type": "DatasetReference"
					},
					"name": "FactCovid19Metrics"
				}
			],
			"transformations": [
				{
					"name": "AddingLaggingAmounts"
				},
				{
					"name": "AddingBoolColumns"
				},
				{
					"name": "AddingPercentages"
				},
				{
					"name": "AlterRow"
				}
			],
			"script": "source(output(\n\t\tROWID as integer,\n\t\tID as integer,\n\t\tUpdated as date,\n\t\tConfirmed as integer,\n\t\tConfirmedChange as integer,\n\t\tDeaths as integer,\n\t\tDeathsChange as integer,\n\t\tRecovered as integer,\n\t\tRecoveredChange as integer,\n\t\tLatitude as decimal(10,5),\n\t\tLongitude as decimal(10,5),\n\t\tISO2 as string,\n\t\tISO3 as string,\n\t\tCountry_Region as string,\n\t\tAdminRegion1 as string,\n\t\tAdminRegion2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> StageCovid19Metrics\nStageCovid19Metrics window(over(CountryID = concat(Country_Region,AdminRegion1,AdminRegion2,toString(Updated))),\n\tasc(Country_Region, true),\n\tasc(AdminRegion1, true),\n\tasc(AdminRegion2, true),\n\tasc(Updated, true),\n\tConfirmedDailyLag = lag(Confirmed,1),\n\t\tConfirmedWeeklyLag = lag(Confirmed,7),\n\t\tDeathsDailyLag = lag(Deaths,1),\n\t\tDeathsWeeklyLag = lag(Deaths,7),\n\t\tRecoveredDailyLag = lag(Recovered,1),\n\t\tRecoveredWeeklyLag = lag(Recovered,7),\n\t\tDateDailyLag = lag(Updated,1),\n\t\tDateWeeklyLag = lag(Updated,7),\n\t\tCountryIdDailyLag = lag(Country_Region,1) + lag(AdminRegion1,1)+lag(AdminRegion2,1),\n\t\tCountryIdWeeklyLag = lag(Country_Region,7) + lag(AdminRegion1,7)+lag(AdminRegion2,7)) ~> AddingLaggingAmounts\nAddingLaggingAmounts derive(DailyMatch = iif(and(minus(DateDailyLag,Updated)==1,concat(Country_Region,AdminRegion1,AdminRegion2)==toString(CountryIdDailyLag)),'TRUE','FALSE'),\n\t\tWeeklyMatch = iif(and(minus(DateWeeklyLag,Updated)==7,concat(Country_Region,AdminRegion1,AdminRegion2)==toString(CountryIdWeeklyLag)),'TRUE','FALSE')) ~> AddingBoolColumns\nAddingBoolColumns derive(ConfirmedDailyPercentage = iif(DailyMatch=='TRUE',(Confirmed-ConfirmedDailyLag)/ConfirmedDailyLag,0),\n\t\tConfirmedWeeklyPercentage = iif(WeeklyMatch=='TRUE',(Confirmed-ConfirmedWeeklyLag)/ConfirmedWeeklyLag,0),\n\t\tDeathsDailyPercentage = iif(DailyMatch=='TRUE',(Deaths-DeathsDailyLag)/DeathsDailyLag,0),\n\t\tDeathsWeeklyPercentage = iif(WeeklyMatch=='TRUE',(Deaths-DeathsWeeklyLag)/DeathsWeeklyLag,0),\n\t\tRecoveredDailyPercentage = iif(DailyMatch=='TRUE',(Recovered-RecoveredDailyLag)/RecoveredDailyLag,0),\n\t\tRecoveredWeeklyPercentage = iif(WeeklyMatch=='TRUE',(Recovered-RecoveredWeeklyLag)/RecoveredWeeklyLag,0)) ~> AddingPercentages\nAddingPercentages alterRow(upsertIf(true())) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tmapColumn(\n\t\tUpdatedDate = Updated,\n\t\tConfirmed,\n\t\tConfirmedChange,\n\t\tDeaths,\n\t\tDeathsChange,\n\t\tRecovered,\n\t\tRecoveredChange,\n\t\tCountry_Region,\n\t\tAdminRegion1,\n\t\tAdminRegion2,\n\t\tConfirmedDailyPercentage,\n\t\tConfirmedWeeklyPercentage,\n\t\tDeathsDailyPercentage,\n\t\tDeathsWeeklyPercentage,\n\t\tRecoveredDailyPercentage,\n\t\tRecoveredWeeklyPercentage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> FactCovid19Metrics"
		}
	}
}