{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-wth-team2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_load_metrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadMetrics",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_metrics",
								"type": "DataFlowReference",
								"datasetParameters": {
									"StageCovid19Metrics": {
										"SchemaName": "STAGE",
										"TableName": "vw_Covid19_Metrics"
									},
									"DimPolicies": {
										"SchemaName": "DW",
										"TableName": "DimPolicies"
									},
									"FactCovid19Metrics": {
										"SchemaName": "DW",
										"TableName": "FactCovid19Metrics"
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "raw/Polybase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_load_metrics')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_load_metrics')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "wth-team2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "StageCovid19Metrics"
						},
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "DimPolicies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "FactCovid19Metrics"
						}
					],
					"transformations": [
						{
							"name": "AddingLaggingAmounts"
						},
						{
							"name": "AddingBoolColumns"
						},
						{
							"name": "AddingPercentages"
						},
						{
							"name": "AddingPolicyID"
						}
					],
					"script": "source(output(\n\t\tROWID as integer,\n\t\tID as integer,\n\t\tUpdated as date,\n\t\tConfirmed as integer,\n\t\tConfirmedChange as integer,\n\t\tDeaths as integer,\n\t\tDeathsChange as integer,\n\t\tRecovered as integer,\n\t\tRecoveredChange as integer,\n\t\tLatitude as decimal(10,5),\n\t\tLongitude as decimal(10,5),\n\t\tISO2 as string,\n\t\tISO3 as string,\n\t\tCountry_Region as string,\n\t\tAdminRegion1 as string,\n\t\tAdminRegion2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> StageCovid19Metrics\nsource(output(\n\t\tPolicyID as integer,\n\t\tISO_Country as string,\n\t\tCountryCode as string,\n\t\tCountryName as string,\n\t\tDate_Recorded as date,\n\t\tconfirmedcases as integer,\n\t\tconfirmeddeaths as integer,\n\t\tStringencyIndex as double,\n\t\tStringencyIndexForDisplay as double,\n\t\tc1_flag as boolean,\n\t\tschool_closing as integer,\n\t\tc2_flag as boolean,\n\t\tWorkplace_closing as integer,\n\t\tc3_flag as boolean,\n\t\tcancel_public_events as integer,\n\t\tc4_flag as boolean,\n\t\tc4_restrictions_on_gatherings as integer,\n\t\tc5_flag as boolean,\n\t\tc5_close_public_transport as integer,\n\t\tc6_flag as boolean,\n\t\tc6_stay_at_home_requirements as integer,\n\t\tc7_flag as boolean,\n\t\tc7_restrictions_on_internal_movement as integer,\n\t\tc8_international_travel_controls as integer,\n\t\te1_flag as boolean,\n\t\te1_income_support as integer,\n\t\t{e2_debt/contract_relief} as integer,\n\t\te3_fiscal_measures as integer,\n\t\te4_international_support as decimal(19,4),\n\t\th1_flag as boolean,\n\t\th1_public_information_campaigns as integer,\n\t\th2_testing_policy as integer,\n\t\th3_contact_tracing as integer,\n\t\th4_emergency_investment_in_healthcare as integer,\n\t\th5_investment_in_vaccines as integer,\n\t\tHashValue as string,\n\t\tInsertedDate as timestamp,\n\t\tUpdatedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimPolicies\nStageCovid19Metrics window(over(CountryID = concat(Country_Region,AdminRegion1,AdminRegion2,toString(Updated))),\n\tasc(Country_Region, true),\n\tasc(AdminRegion1, true),\n\tasc(AdminRegion2, true),\n\tasc(Updated, true),\n\tConfirmedDailyLag = lag(Confirmed,1),\n\t\tConfirmedWeeklyLag = lag(Confirmed,7),\n\t\tDeathsDailyLag = lag(Deaths,1),\n\t\tDeathsWeeklyLag = lag(Deaths,7),\n\t\tRecoveredDailyLag = lag(Recovered,1),\n\t\tRecoveredWeeklyLag = lag(Recovered,7),\n\t\tDateDailyLag = lag(Updated,1),\n\t\tDateWeeklyLag = lag(Updated,7),\n\t\tCountryIdDailyLag = lag(Country_Region,1) + lag(AdminRegion1,1)+lag(AdminRegion2,1),\n\t\tCountryIdWeeklyLag = lag(Country_Region,7) + lag(AdminRegion1,7)+lag(AdminRegion2,7)) ~> AddingLaggingAmounts\nAddingLaggingAmounts derive(DailyMatch = iif(and(minus(DateDailyLag,Updated)==1,concat(Country_Region,AdminRegion1,AdminRegion2)==toString(CountryIdDailyLag)),'TRUE','FALSE'),\n\t\tWeeklyMatch = iif(and(minus(DateWeeklyLag,Updated)==7,concat(Country_Region,AdminRegion1,AdminRegion2)==toString(CountryIdWeeklyLag)),'TRUE','FALSE')) ~> AddingBoolColumns\nAddingBoolColumns derive(ConfirmedDailyPercentage = iif(DailyMatch=='TRUE',(Confirmed-ConfirmedDailyLag)/ConfirmedDailyLag,0),\n\t\tConfirmedWeeklyPercentage = iif(WeeklyMatch=='TRUE',(Confirmed-ConfirmedWeeklyLag)/ConfirmedWeeklyLag,0),\n\t\tDeathsDailyPercentage = iif(DailyMatch=='TRUE',(Deaths-DeathsDailyLag)/DeathsDailyLag,0),\n\t\tDeathsWeeklyPercentage = iif(WeeklyMatch=='TRUE',(Deaths-DeathsWeeklyLag)/DeathsWeeklyLag,0),\n\t\tRecoveredDailyPercentage = iif(DailyMatch=='TRUE',(Recovered-RecoveredDailyLag)/RecoveredDailyLag,0),\n\t\tRecoveredWeeklyPercentage = iif(WeeklyMatch=='TRUE',(Recovered-RecoveredWeeklyLag)/RecoveredWeeklyLag,0)) ~> AddingPercentages\nAddingPercentages, DimPolicies lookup(concat(Country_Region,'-',toString(Updated)) == concat(CountryName,'-',toString(Date_Recorded)),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> AddingPolicyID\nAddingPolicyID sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tmapColumn(\n\t\tUpdatedDate = Updated,\n\t\tConfirmed,\n\t\tConfirmedChange,\n\t\tDeaths,\n\t\tDeathsChange,\n\t\tRecovered,\n\t\tRecoveredChange,\n\t\tCountry = Country_Region,\n\t\tAdminRegion1,\n\t\tAdminRegion2,\n\t\tConfirmedDailyPercentage,\n\t\tConfirmedWeeklyPercentage,\n\t\tDeathsDailyPercentage,\n\t\tDeathsWeeklyPercentage,\n\t\tRecoveredDailyPercentage,\n\t\tRecoveredWeeklyPercentage,\n\t\tPolicyID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1) ~> FactCovid19Metrics"
				}
			},
			"dependsOn": []
		}
	]
}