{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-wth-team2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_load_date')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "wth-team2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "StageDate"
						},
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "DimDate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "DimDateDest"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "Exists"
						}
					],
					"script": "source(output(\n\t\tDateKey as integer,\n\t\tFullDate as date,\n\t\tisWeekDay as boolean,\n\t\tDayOfWeek as integer,\n\t\tDayOfMonth as integer,\n\t\tDayOfQuarter as integer,\n\t\tDayOfYear as integer,\n\t\tDayName as string,\n\t\tWeekOfYear as integer,\n\t\tWeekName as string,\n\t\tMonthOfYear as integer,\n\t\tMonthName as string,\n\t\tCalendarQuarter as integer,\n\t\tCalendarQuarterName as string,\n\t\tCalendarYear as integer,\n\t\tFiscalMonth as integer,\n\t\tFiscalMonthName as string,\n\t\tFiscalQuarter as integer,\n\t\tFiscalQuarterName as string,\n\t\tFiscalYear as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> StageDate\nsource(output(\n\t\tDateKey as integer,\n\t\tFullDate as date,\n\t\tisWeekDay as boolean,\n\t\tDayOfWeek as integer,\n\t\tDayOfMonth as integer,\n\t\tDayOfQuarter as integer,\n\t\tDayOfYear as integer,\n\t\tDayName as string,\n\t\tWeekOfYear as integer,\n\t\tWeekName as string,\n\t\tMonthOfYear as integer,\n\t\tMonthName as string,\n\t\tCalendarQuarter as integer,\n\t\tCalendarQuarterName as string,\n\t\tCalendarYear as integer,\n\t\tFiscalMonth as integer,\n\t\tFiscalMonthName as string,\n\t\tFiscalQuarter as integer,\n\t\tFiscalQuarterName as string,\n\t\tFiscalYear as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimDate\nExists alterRow(upsertIf(true())) ~> AlterRow1\nStageDate, DimDate exists(StageDate@DateKey == DimDate@DateKey,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['DateKey'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimDateDest"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_load_policy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "wth-team2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "StagePolicies"
						},
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "DimPolicies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "DimPoliciesDestination"
						}
					],
					"transformations": [
						{
							"name": "CreatingHash"
						},
						{
							"name": "Exists"
						},
						{
							"name": "GrabAllColumns"
						},
						{
							"name": "SelectingAllColumns"
						},
						{
							"name": "AddingTimestamp"
						},
						{
							"name": "AlterRow"
						},
						{
							"name": "SurrogateKey"
						}
					],
					"script": "source(output(\n\t\tISO_Country as string,\n\t\tCountryCode as string,\n\t\tCountryName as string,\n\t\tDate_Recorded as date,\n\t\tconfirmedcases as integer,\n\t\tconfirmeddeaths as integer,\n\t\tStringencyIndex as double,\n\t\tStringencyIndexForDisplay as double,\n\t\tc1_flag as boolean,\n\t\tschool_closing as integer,\n\t\tc2_flag as boolean,\n\t\tWorkplace_closing as integer,\n\t\tc3_flag as boolean,\n\t\tcancel_public_events as integer,\n\t\tc4_flag as boolean,\n\t\tc4_restrictions_on_gatherings as integer,\n\t\tc5_flag as boolean,\n\t\tc5_close_public_transport as integer,\n\t\tc6_flag as boolean,\n\t\tc6_stay_at_home_requirements as integer,\n\t\tc7_flag as boolean,\n\t\tc7_restrictions_on_internal_movement as integer,\n\t\tc8_international_travel_controls as integer,\n\t\te1_flag as boolean,\n\t\te1_income_support as integer,\n\t\t{e2_debt/contract_relief} as integer,\n\t\te3_fiscal_measures as integer,\n\t\te4_international_support as decimal(19,4),\n\t\th1_flag as boolean,\n\t\th1_public_information_campaigns as integer,\n\t\th2_testing_policy as integer,\n\t\th3_contact_tracing as integer,\n\t\th4_emergency_investment_in_healthcare as integer,\n\t\th5_investment_in_vaccines as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> StagePolicies\nsource(output(\n\t\tPolicyID as integer,\n\t\tISO_Country as string,\n\t\tCountryCode as string,\n\t\tCountryName as string,\n\t\tDate_Recorded as date,\n\t\tconfirmedcases as integer,\n\t\tconfirmeddeaths as integer,\n\t\tStringencyIndex as double,\n\t\tStringencyIndexForDisplay as double,\n\t\tc1_flag as boolean,\n\t\tschool_closing as integer,\n\t\tc2_flag as boolean,\n\t\tWorkplace_closing as integer,\n\t\tc3_flag as boolean,\n\t\tcancel_public_events as integer,\n\t\tc4_flag as boolean,\n\t\tc4_restrictions_on_gatherings as integer,\n\t\tc5_flag as boolean,\n\t\tc5_close_public_transport as integer,\n\t\tc6_flag as boolean,\n\t\tc6_stay_at_home_requirements as integer,\n\t\tc7_flag as boolean,\n\t\tc7_restrictions_on_internal_movement as integer,\n\t\tc8_international_travel_controls as integer,\n\t\te1_flag as boolean,\n\t\te1_income_support as integer,\n\t\t{e2_debt/contract_relief} as integer,\n\t\te3_fiscal_measures as integer,\n\t\te4_international_support as decimal(19,4),\n\t\th1_flag as boolean,\n\t\th1_public_information_campaigns as integer,\n\t\th2_testing_policy as integer,\n\t\th3_contact_tracing as integer,\n\t\th4_emergency_investment_in_healthcare as integer,\n\t\th5_investment_in_vaccines as integer,\n\t\tHashValue as string,\n\t\tInsertedDate as timestamp,\n\t\tUpdatedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimPolicies\nSurrogateKey derive(HashValue = sha1(CountryCode+CountryName+toString(Date_Recorded))) ~> CreatingHash\nCreatingHash, DimPolicies exists(CreatingHash@HashValue == DimPolicies@HashValue,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists\nExists, DimPolicies lookup(concat(StagePolicies@CountryCode,'_',StagePolicies@CountryName,'_',toString(StagePolicies@Date_Recorded)) == concat(DimPolicies@CountryCode,'_',DimPolicies@CountryName,'_',toString(DimPolicies@Date_Recorded)),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GrabAllColumns\nAddingTimestamp select(mapColumn(\n\t\tPolicyID = NewPolicyID,\n\t\tISO_Country = StagePolicies@ISO_Country,\n\t\tCountryCode = StagePolicies@CountryCode,\n\t\tCountryName = StagePolicies@CountryName,\n\t\tDate_Recorded = StagePolicies@Date_Recorded,\n\t\tconfirmedcases = StagePolicies@confirmedcases,\n\t\tconfirmeddeaths = StagePolicies@confirmeddeaths,\n\t\tStringencyIndex = StagePolicies@StringencyIndex,\n\t\tStringencyIndexForDisplay = StagePolicies@StringencyIndexForDisplay,\n\t\tc1_flag = StagePolicies@c1_flag,\n\t\tschool_closing = StagePolicies@school_closing,\n\t\tc2_flag = StagePolicies@c2_flag,\n\t\tWorkplace_closing = StagePolicies@Workplace_closing,\n\t\tc3_flag = StagePolicies@c3_flag,\n\t\tcancel_public_events = StagePolicies@cancel_public_events,\n\t\tc4_flag = StagePolicies@c4_flag,\n\t\tc4_restrictions_on_gatherings = StagePolicies@c4_restrictions_on_gatherings,\n\t\tc5_flag = StagePolicies@c5_flag,\n\t\tc5_close_public_transport = StagePolicies@c5_close_public_transport,\n\t\tc6_flag = StagePolicies@c6_flag,\n\t\tc6_stay_at_home_requirements = StagePolicies@c6_stay_at_home_requirements,\n\t\tc7_flag = StagePolicies@c7_flag,\n\t\tc7_restrictions_on_internal_movement = StagePolicies@c7_restrictions_on_internal_movement,\n\t\tc8_international_travel_controls = StagePolicies@c8_international_travel_controls,\n\t\te1_flag = StagePolicies@e1_flag,\n\t\te1_income_support = StagePolicies@e1_income_support,\n\t\te3_fiscal_measures = StagePolicies@e3_fiscal_measures,\n\t\te4_international_support = StagePolicies@e4_international_support,\n\t\th1_flag = StagePolicies@h1_flag,\n\t\th1_public_information_campaigns = StagePolicies@h1_public_information_campaigns,\n\t\th2_testing_policy = StagePolicies@h2_testing_policy,\n\t\th3_contact_tracing = StagePolicies@h3_contact_tracing,\n\t\th4_emergency_investment_in_healthcare = StagePolicies@h4_emergency_investment_in_healthcare,\n\t\th5_investment_in_vaccines = StagePolicies@h5_investment_in_vaccines\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectingAllColumns\nGrabAllColumns derive(inserted_date = iif(isNull(InsertedDate),fromUTC(currentTimestamp(),'PST'),InsertedDate),\n\t\tupdated_date = iif(isNull(UpdatedDate),fromUTC(currentTimestamp(),'PST'),UpdatedDate)) ~> AddingTimestamp\nSelectingAllColumns alterRow(upsertIf(true())) ~> AlterRow\nStagePolicies keyGenerate(output(NewPolicyID as long),\n\tstartAt: 1L) ~> SurrogateKey\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PolicyID'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tmapColumn(\n\t\tISO_Country,\n\t\tCountryCode,\n\t\tCountryName,\n\t\tDate_Recorded,\n\t\tconfirmedcases,\n\t\tconfirmeddeaths,\n\t\tStringencyIndex,\n\t\tStringencyIndexForDisplay,\n\t\tc1_flag,\n\t\tschool_closing,\n\t\tc2_flag,\n\t\tWorkplace_closing,\n\t\tc3_flag,\n\t\tcancel_public_events,\n\t\tc4_flag,\n\t\tc4_restrictions_on_gatherings,\n\t\tc5_flag,\n\t\tc5_close_public_transport,\n\t\tc6_flag,\n\t\tc6_stay_at_home_requirements,\n\t\tc7_flag,\n\t\tc7_restrictions_on_internal_movement,\n\t\tc8_international_travel_controls,\n\t\te1_flag,\n\t\te1_income_support,\n\t\te3_fiscal_measures,\n\t\te4_international_support,\n\t\th1_flag,\n\t\th1_public_information_campaigns,\n\t\th2_testing_policy,\n\t\th3_contact_tracing,\n\t\th4_emergency_investment_in_healthcare,\n\t\th5_investment_in_vaccines,\n\t\tPolicyID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimPoliciesDestination"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_Load_SqlVM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.TableList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "SourceSystem",
													"value": {
														"value": "@item().Name",
														"type": "Expression"
													}
												}
											],
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SqlServerVM",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DataLake_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().ContainerName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@concat(item().FolderName,'/',item().TableName)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"TableList": {
						"type": "array"
					},
					"SoureSystem": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_comosdb_via_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_cosmosdb_datalake",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"cosmosdb": {},
									"datalake": {
										"Containername": {
											"value": "@pipeline().parameters.containername",
											"type": "Expression"
										},
										"foldername": {
											"value": "@pipeline().parameters.foldername",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"parameters": {
					"containername": {
						"type": "string"
					},
					"foldername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_load_policydata_from_adls_to_Synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_datalake_policies",
								"type": "DataFlowReference",
								"parameters": {
									"ContainerName": {
										"value": "'@{pipeline().parameters.ContainerName}'",
										"type": "Expression"
									},
									"FolderName": {
										"value": "'@{pipeline().parameters.FolderName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ADLSCosmosDB": {
										"Containername": {
											"value": "@pipeline().parameters.ContainerName",
											"type": "Expression"
										},
										"foldername": {
											"value": "@pipeline().parameters.FolderName",
											"type": "Expression"
										}
									},
									"AzureSynapse": {
										"SchemaName": {
											"value": "@pipeline().parameters.SchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "raw/Polybase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None"
						}
					}
				],
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "raw"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "CosmosDB_SingleFile"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "Stage"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "Policies"
					}
				},
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_loading_dimensions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadingDimCountry",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_country",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageCountry": {
										"SchemaName": "STAGE",
										"TableName": "vw_Country"
									},
									"DimCountry": {
										"SchemaName": "DW",
										"TableName": "DimCountry"
									},
									"DimCountryDestination": {
										"SchemaName": "DW",
										"TableName": "DimCountry"
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "raw/Polybase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LoadingDimPolicy",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "LoadingDimCountry",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_policy",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagePolicies": {
										"SchemaName": "Stage",
										"TableName": "vw_Policies"
									},
									"DimPolicies": {
										"SchemaName": "DW",
										"TableName": "DimPolicies"
									},
									"DimPoliciesDestination": {
										"SchemaName": "DW",
										"TableName": "DimPolicies"
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "raw/Polybase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_load_policy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_loading_dimensions_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadingDimPolicy",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_policy",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagePolicies": {
										"SchemaName": "Stage",
										"TableName": "vw_Policies"
									},
									"DimPolicies": {
										"SchemaName": "DW",
										"TableName": "DimPolicies"
									},
									"DimPoliciesDestination": {
										"SchemaName": "DW",
										"TableName": "DimPolicies"
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "raw/Polybase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_load_policy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_Lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_gettablelist]",
								"storedProcedureParameters": {
									"Name": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Name",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLAzure",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "dbo",
									"TableName": "covid19_metrics"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.Name",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "SqlAzure",
									"activities": [
										{
											"name": "Execute SQLAzure Pipeline",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Pipeline_Load_SqlAzure",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TableList": {
														"value": "@activity('Lookup').output.value",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "SqlVM",
									"activities": [
										{
											"name": "Execute SQLVM Pipeline",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Pipeline_Load_SqlVM",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TableList": {
														"value": "@activity('Lookup').output.value",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CosmosDB",
									"activities": [
										{
											"name": "LoadCosmosDB",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pipeline_Load_Cosmos_copy1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TableList": {
														"value": "@activity('Lookup').output.value",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Pipeline_Load_SqlVM')]"
			]
		}
	]
}