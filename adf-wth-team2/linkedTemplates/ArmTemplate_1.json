{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-wth-team2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_load_policy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "wth-team2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "StageCountry"
						},
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "DimCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "DimCountryDestination"
						}
					],
					"transformations": [
						{
							"name": "CreatingHash"
						},
						{
							"name": "Exists"
						},
						{
							"name": "GrabAllColumns"
						},
						{
							"name": "SelectingAllColumns"
						},
						{
							"name": "AddingTimestamp"
						},
						{
							"name": "AlterRow"
						}
					],
					"script": "source(output(\n\t\tCountryCode as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> StageCountry\nsource(output(\n\t\tCountryCode as string,\n\t\tCountry as string,\n\t\tHashValue as string,\n\t\tInsertedDate as timestamp,\n\t\tUpdatedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimCountry\nStageCountry derive(HashValue = sha1(Country)) ~> CreatingHash\nCreatingHash, DimCountry exists(CreatingHash@HashValue == DimCountry@HashValue,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists\nExists, DimCountry lookup(StageCountry@Country == DimCountry@Country,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GrabAllColumns\nAddingTimestamp select(mapColumn(\n\t\tCountry = StageCountry@Country,\n\t\tCountryCode = StageCountry@CountryCode,\n\t\tHashValue = CreatingHash@HashValue,\n\t\tInsertedDate = inserted_date,\n\t\tUpdatedDate = updated_date\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectingAllColumns\nGrabAllColumns derive(inserted_date = iif(isNull(InsertedDate),fromUTC(currentTimestamp(),'PST'),InsertedDate),\n\t\tupdated_date = iif(isNull(UpdatedDate),fromUTC(currentTimestamp(),'PST'),UpdatedDate)) ~> AddingTimestamp\nSelectingAllColumns alterRow(upsertIf(true())) ~> AlterRow\nAlterRow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Country'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tmapColumn(\n\t\tCountry,\n\t\tCountryCode,\n\t\tHashValue,\n\t\tInsertedDate,\n\t\tUpdatedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimCountryDestination"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_load_date')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "wth-team2"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "StageDate"
						},
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "DimDate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_AzureSynapse",
								"type": "DatasetReference"
							},
							"name": "DimDateDest"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "Exists"
						}
					],
					"script": "source(output(\n\t\tDateKey as integer,\n\t\tFullDate as date,\n\t\tisWeekDay as boolean,\n\t\tDayOfWeek as integer,\n\t\tDayOfMonth as integer,\n\t\tDayOfQuarter as integer,\n\t\tDayOfYear as integer,\n\t\tDayName as string,\n\t\tWeekOfYear as integer,\n\t\tWeekName as string,\n\t\tMonthOfYear as integer,\n\t\tMonthName as string,\n\t\tCalendarQuarter as integer,\n\t\tCalendarQuarterName as string,\n\t\tCalendarYear as integer,\n\t\tFiscalMonth as integer,\n\t\tFiscalMonthName as string,\n\t\tFiscalQuarter as integer,\n\t\tFiscalQuarterName as string,\n\t\tFiscalYear as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> StageDate\nsource(output(\n\t\tDateKey as integer,\n\t\tFullDate as date,\n\t\tisWeekDay as boolean,\n\t\tDayOfWeek as integer,\n\t\tDayOfMonth as integer,\n\t\tDayOfQuarter as integer,\n\t\tDayOfYear as integer,\n\t\tDayName as string,\n\t\tWeekOfYear as integer,\n\t\tWeekName as string,\n\t\tMonthOfYear as integer,\n\t\tMonthName as string,\n\t\tCalendarQuarter as integer,\n\t\tCalendarQuarterName as string,\n\t\tCalendarYear as integer,\n\t\tFiscalMonth as integer,\n\t\tFiscalMonthName as string,\n\t\tFiscalQuarter as integer,\n\t\tFiscalQuarterName as string,\n\t\tFiscalYear as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> DimDate\nExists alterRow(upsertIf(true())) ~> AlterRow1\nStageDate, DimDate exists(StageDate@DateKey == DimDate@DateKey,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['DateKey'],\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimDateDest"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_Load_SqlVM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.TableList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "SourceSystem",
													"value": {
														"value": "@item().Name",
														"type": "Expression"
													}
												}
											],
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SqlServerVM",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@item().SchemaName",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_DataLake_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().ContainerName",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@concat(item().FolderName,'/',item().TableName)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"TableList": {
						"type": "array"
					},
					"SoureSystem": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_comosdb_via_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_cosmosdb_datalake",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"cosmosdb": {},
									"datalake": {
										"Containername": {
											"value": "@pipeline().parameters.containername",
											"type": "Expression"
										},
										"foldername": {
											"value": "@pipeline().parameters.foldername",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"parameters": {
					"containername": {
						"type": "string"
					},
					"foldername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_load_policydata_from_adls_to_Synapse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_datalake_policies",
								"type": "DataFlowReference",
								"parameters": {
									"ContainerName": {
										"value": "'@{pipeline().parameters.ContainerName}'",
										"type": "Expression"
									},
									"FolderName": {
										"value": "'@{pipeline().parameters.FolderName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ADLSCosmosDB": {
										"Containername": {
											"value": "@pipeline().parameters.ContainerName",
											"type": "Expression"
										},
										"foldername": {
											"value": "@pipeline().parameters.FolderName",
											"type": "Expression"
										}
									},
									"AzureSynapse": {
										"SchemaName": {
											"value": "@pipeline().parameters.SchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "raw/Polybase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None"
						}
					}
				],
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "raw"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "CosmosDB_SingleFile"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "Stage"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "Policies"
					}
				},
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_loading_dimensions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadingDimCountry",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_country",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageCountry": {
										"SchemaName": "STAGE",
										"TableName": "vw_Country"
									},
									"DimCountry": {
										"SchemaName": "DW",
										"TableName": "DimCountry"
									},
									"DimCountryDestination": {
										"SchemaName": "DW",
										"TableName": "DimCountry"
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "raw/Polybase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LoadingDimPolicy",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_policy",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageCountry": {
										"SchemaName": "STAGE",
										"TableName": "VW_Policies"
									},
									"DimCountry": {
										"SchemaName": "DW",
										"TableName": "DimPolicies"
									},
									"DimCountryDestination": {
										"SchemaName": "DW",
										"TableName": "DimPolicies"
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "raw/Polybase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LoadingDimDates",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_load_date",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageDate": {
										"SchemaName": "STAGE",
										"TableName": "vw_Dates"
									},
									"DimDate": {
										"SchemaName": "DW",
										"TableName": "DimDates"
									},
									"DimDateDest": {
										"SchemaName": "DW",
										"TableName": "DimDates"
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "LS_AzureDataLakeStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "raw/Polybase"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_load_policy')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_load_date')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_Lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_gettablelist]",
								"storedProcedureParameters": {
									"Name": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Name",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLAzure",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "dbo",
									"TableName": "covid19_metrics"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.Name",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "SqlAzure",
									"activities": [
										{
											"name": "Execute SQLAzure Pipeline",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Pipeline_Load_SqlAzure",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TableList": {
														"value": "@activity('Lookup').output.value",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "SqlVM",
									"activities": [
										{
											"name": "Execute SQLVM Pipeline",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Pipeline_Load_SqlVM",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TableList": {
														"value": "@activity('Lookup').output.value",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CosmosDB",
									"activities": [
										{
											"name": "LoadCosmosDB",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pipeline_Load_Cosmos_copy1",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"TableList": {
														"value": "@activity('Lookup').output.value",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "wth-team2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Pipeline_Load_SqlVM')]"
			]
		}
	]
}